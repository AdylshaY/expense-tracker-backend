openapi: 3.1.0
info:
  title: Budget API
  version: 1.0.0
  description: Budget API Information
  contact:
    name: Adylsha Yumayev
servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        isActive:
          type: boolean
      required:
        - name
        - email

    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        userId:
          type: integer
      required:
        - name
        - userId

    Budget:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        categoryId:
          type: integer
        userId:
          type: integer
      required:
        - amount
        - startDate
        - endDate
        - categoryId
        - userId

    Transaction:
      type: object
      properties:
        id:
          type: integer
        amount:
          type: number
        description:
          type: string
        date:
          type: string
          format: date
        categoryId:
          type: integer
        userId:
          type: integer
      required:
        - amount
        - date
        - categoryId
        - userId

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
        error:
          type: object
        url:
          type: string
        statusCode:
          type: integer

paths:
  #
  # AUTH ROUTES
  #
  /auth/sign-up:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                name:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request

  /auth/sign-in:
    post:
      summary: Login with existing credentials
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      token:
                        type: string
        '401':
          description: Unauthorized

  /auth/sign-out:
    post:
      summary: Logout current user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized

  #
  # USER ROUTES
  #
  /users:
    get:
      summary: Get all users
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      summary: Update user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: User updated
        '404':
          description: User not found

    delete:
      summary: Delete user
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
        '404':
          description: User not found

  #
  # CATEGORY ROUTES
  #
  /categories:
    get:
      summary: Get all categories for user
      tags: [Categories]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
    post:
      summary: Create new category
      tags: [Categories]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                userId:
                  type: integer
              required:
                - name
                - userId
      responses:
        '201':
          description: Category created successfully
        '401':
          description: Unauthorized

  /categories/{id}:
    get:
      summary: Get category by ID
      tags: [Categories]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Category'
        '404':
          description: Category not found

    put:
      summary: Update category
      tags: [Categories]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Category updated
        '404':
          description: Category not found

    delete:
      summary: Delete category
      tags: [Categories]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Category deleted
        '404':
          description: Category not found

  #
  # BUDGET ROUTES
  #
  /budgets:
    get:
      summary: Get all budgets for user
      tags: [Budgets]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of budgets
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Budget'
        '401':
          description: Unauthorized
    post:
      summary: Create new budget
      tags: [Budgets]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                categoryId:
                  type: integer
              required:
                - amount
                - startDate
                - endDate
                - categoryId
      responses:
        '201':
          description: Budget created successfully
        '401':
          description: Unauthorized

  /budgets/{id}:
    get:
      summary: Get budget by ID
      tags: [Budgets]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Budget details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Budget'
        '404':
          description: Budget not found

    put:
      summary: Update budget
      tags: [Budgets]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                categoryId:
                  type: integer
      responses:
        '200':
          description: Budget updated
        '404':
          description: Budget not found

    delete:
      summary: Delete budget
      tags: [Budgets]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Budget deleted
        '404':
          description: Budget not found

  #
  # TRANSACTION ROUTES
  #
  /transactions:
    get:
      summary: Get all transactions for user
      tags: [Transactions]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
        '401':
          description: Unauthorized
    post:
      summary: Create new transaction
      tags: [Transactions]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                description:
                  type: string
                date:
                  type: string
                  format: date
                categoryId:
                  type: integer
              required:
                - amount
                - date
                - categoryId
      responses:
        '201':
          description: Transaction created successfully
        '401':
          description: Unauthorized

  /transactions/{id}:
    get:
      summary: Get transaction by ID
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Transaction'
        '404':
          description: Transaction not found

    put:
      summary: Update transaction
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                description:
                  type: string
                date:
                  type: string
                  format: date
                categoryId:
                  type: integer
      responses:
        '200':
          description: Transaction updated
        '404':
          description: Transaction not found

    delete:
      summary: Delete transaction
      tags: [Transactions]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Transaction deleted
        '404':
          description: Transaction not found
